package com.edianniu.pscp.message.commons;


/**
 * 短信 msg_id
 *
 * @author AbnerElk on 15/12/24.
 */
public enum MessageId {

    REGISTER_CODE("REGISTER_CODE", "注册验证码", "NOTIFY"),
    REGISTER_SUCCESS("REGISTER_SUCCESS", "注册成功", "NOTIFY"),
    REGISTER_COUPON("REGISTER_COUPON", "注册送优惠券", "COUPON_LIST_PAGE"),
    RETRIEVE_PASSWORD_CODE("RETRIEVE_PASSWORD_CODE", "找回密码", "NOTIFY"),
    CHANGE_PASSWORD_SUCCESS("CHANGE_PASSWORD_SUCCESS", "修改密码", "NOTIFY"),
    NEW_PASSWORD_CODE("NEW_PASSWORD_CODE", "新密码创建", "NOTIFY"),
    COMPANY_ACCOUNT_INVITATION("COMPANY_ACCOUNT_INVITATION", "企业用户通知", "NOTIFY"),
    ELECTRICIAN_AUDIT_SUCCESS("ELECTRICIAN_AUDIT_SUCCESS", "电工审核成功", "NOTIFY"),
    ELECTRICIAN_AUDIT_FAIL("ELECTRICIAN_AUDIT_FAIL", "电工审核失败", "NOTIFY"),
    COMPANY_AUDIT_SUCCESS("COMPANY_AUDIT_SUCCESS", "企业审核成功", "NOTIFY"),
    COMPANY_AUDIT_FAIL("COMPANY_AUDIT_FAIL", "企业审核失败", "NOTIFY"),
    ELECTRICIAN_AUDIT_SUBMIT("ELECTRICIAN_AUDIT_SUBMIT", "提交审核", "NOTIFY"),
    COMPANY_AUDIT_SUBMIT("COMPANY_AUDIT_SUBMIT", "提交审核", "NOTIFY"),
    AUDIT_COUPON("AUDIT_COUPON", "认证送优惠券", "COUPON_LIST_PAGE"),
    COMMON_COUPON("COMMON_COUPON", "优惠券", "COUPON_LIST_PAGE"),
    ORDER_ACCEPT_SUCCESS("ORDER_ACCEPT_SUCCESS", "接单成功", "NOTIFY"),
    ORDER_ACCEPT_SUCCESS_COMPANY("ORDER_ACCEPT_SUCCESS_COMPANY", "接单成功", "NOTIFY"),
    ORDER_CONFIRM("ORDER_CONFIRM", "确认工单", "NOTIFY"),
    ORDER_CANCEL("ORDER_CANCEL", "取消工单", "NOTIFY"),
    ORDER_START("ORDER_START", "工单开始", "NOTIFY"),
    ORDER_FINISH("ORDER_FINISH", "工单结束", "NOTIFY"),
    ORDER_REMIND("ORDER_REMIND", "工单时间提醒", "NOTIFY"),
    ORDER_FAIL("ORDER_FAIL", "不符合", "NOTIFY"),
    //add by cyl 20180410 
    SOCIAL_ORDER_PUBLISH_SUCCESS("SOCIAL_ORDER_PUBLISH_SUCCESS", "招募工单发布成功", "NOTIFY"),
    
    SOCIAL_ORDER_PAY_REMIND("SOCIAL_ORDER_PAY_REMIND", "招募工单支付提醒", "NOTIFY"),
    ORDER_SETTLEMENT_SUCCESS("ORDER_SETTLEMENT_SUCCESS", "结算完成", "NOTIFY"),
    SOCIAL_ORDER_AUDIT_SUCCESS("SOCIAL_ORDER_AUDIT_SUCCESS", "社会电工订单审核成功", "NOTIFY"),
    SOCIAL_ORDER_AUDIT_FAILURE("SOCIAL_ORDER_AUDIT_FAILURE", "社会电工订单审核失败", "NOTIFY"),
    SOCIAL_ORDER_SETTLEMENT("SOCIAL_ORDER_SETTLEMENT", "社会电工订单结算成功", "NOTIFY"),
    SOCIAL_ORDER_SETTLEMENT_COMPANY("SOCIAL_ORDER_SETTLEMENT", "社会电工订单结算成功(派单人)", "NOTIFY"),
    BIND_BANK_CARD_CODE("BIND_BANK_CARD_CODE", "绑定银行卡", "NOTIFY"),
    UNBIND_BANK_CARD_CODE("UNBIND_BANK_CARD_CODE", "解绑银行卡", "NOTIFY"),
    RECHARGE_SUCCESS("RECHARGE_SUCCESS", "充值成功", "NOTIFY"),
    WITH_DRAWALS_CODE("WITH_DRAWALS_CODE", "提现验证码", "NOTIFY"),
    WITH_DRAWALS_FAIL("WITH_DRAWALS_FAIL", "提现失败", "NOTIFY"),
    WITH_DRAWALS_SUCCESS("WITH_DRAWALS_SUCCESS", "提现成功", "NOTIFY"),
    NEW_ORDER_REMIND("NEW_ORDER_REMIND", "新订单提醒", "NOTIFY"),
    ORDER_EVALUATE_CUSTOMER("ORDER_EVALUATE_CUSTOMER", "工单评价", "NOTIFY"),
    ORDER_EVALUATE_FACILITATOR("ORDER_EVALUATE_FACILITATOR", "工单评价", "NOTIFY"),
    /**
     * 20170930 add by cyl 电工|客户邀请相关
     **/
    ELECTRICIAN_INVITATION("ELECTRICIAN_INVITATION", "电工邀请", "ELECTRICIAN_INVITATION"),
    ELECTRICIAN_INVITATION_NOTIFY("ELECTRICIAN_INVITATION_NOTIFY", "电工邀请者通知", "NOTIFY"),
    AGREE_ELECTRICIAN_INVITATION("AGREE_ELECTRICIAN_INVITATION", "同意电工邀请", "NOTIFY"),
    AGREE_ELECTRICIAN_INVITATION_NOTIFY("AGREE_ELECTRICIAN_INVITATION_NOTIFY", "同意电工邀请通知", "NOTIFY"),
    REJECT_ELECTRICIAN_INVITATION("REJECT_ELECTRICIAN_INVITATION", "拒绝电工邀请", "NOTIFY"),
    REJECT_ELECTRICIAN_INVITATION_NOTIFY("REJECT_ELECTRICIAN_INVITATION_NOTIFY", "拒绝电工邀请通知", "NOTIFY"),
    APPLY_ELECTRICIAN_UNBUND("APPLY_ELECTRICIAN_UNBUND", "申请电工解绑", "APPLY_ELECTRICIAN_UNBUND"),
    APPLY_ELECTRICIAN_UNBUND_NOTIFY("APPLY_ELECTRICIAN_UNBUND_NOTIFY", "申请电工解绑者通知", "NOTIFY"),
    AGREE_ELECTRICIAN_UNBUND("AGREE_ELECTRICIAN_UNBUND", "同意电工解绑", "NOTIFY"),
    AGREE_ELECTRICIAN_UNBUND_NOTIFY("AGREE_ELECTRICIAN_UNBUND_NOTIFY", "同意电工解绑通知", "NOTIFY"),
    REJECT_ELECTRICIAN_UNBUND("REJECT_ELECTRICIAN_UNBUND", "拒绝电工解绑", "NOTIFY"),
    REJECT_ELECTRICIAN_UNBUND_NOTIFY("REJECT_ELECTRICIAN_UNBUND_NOTIFY", "拒绝电工解绑通知", "NOTIFY"),
    COMPANY_INVITATION("COMPANY_INVITATION", "企业邀请", "COMPANY_INVITATION"),
    COMPANY_INVITATION_NOTIFY("COMPANY_INVITATION_NOTIFY", "企业邀请者通知", "NOTIFY"),
    AGREE_COMPANY_INVITATION("AGREE_COMPANY_INVITATION", "同意企业邀请", "NOTIFY"),
    AGREE_COMPANY_INVITATION_NOTIFY("AGREE_COMPANY_INVITATION_NOTIFY", "同意企业邀请通知", "NOTIFY"),
    REJECT_COMPANY_INVITATION("REJECT_COMPANY_INVITATION", "拒绝企业邀请", "NOTIFY"),
    REJECT_COMPANY_INVITATION_NOTIFY("REJECT_COMPANY_INVITATION_NOTIFY", "拒绝企业邀请通知", "NOTIFY"),
    /**
     * 20171023 add by tdb 服务商|客户需求相关
     */
    NEEDS_ORDER_PAYMENT_FACILITATOR("NEEDS_ORDER_PAYMENT_FACILITATOR", "需求响应并支付", "NOTIFY"),
    NEEDS_ORDER_CONFORMITY_FACILITATOR("NEEDS_ORDER_CONFORMITY_FACILITATOR", "需求订单符合", "NOTIFY"),
    NEEDS_ORDER_INCONFORMITY_FACILITATOR("NEEDS_ORDER_INCONFORMITY_FACILITATOR", "需求订单不符合", "NOTIFY"),
    NEEDS_ORDER_COOPERATION_FACILITATOR("NEEDS_ORDER_COOPERATION_FACILITATOR", "需求订单合作成功", "NOTIFY"),
    NEEDS_ORDER_UNCOOPERATIVE_FACILITATOR("NEEDS_ORDER_UNCOOPERATIVE_FACILITATOR", "需求订单不合作", "NOTIFY"),
    NEEDS_SETTLEMENT_SUCCESS_FACILITATOR("NEEDS_SETTLEMENT_SUCCESS_FACILITATOR", "需求结算", "NOTIFY"),
    NEEDS_AUDIT_SUCCESS_CUSTOMER("NEEDS_AUDIT_SUCCESS_CUSTOMER", "需求审核通过", "NOTIFY"),
    NEEDS_AUDIT_FAILURE_CUSTOMER("NEEDS_AUDIT_FAILURE_CUSTOMER", "需求审核不通过", "NOTIFY"),
    NEEDS_CLOSE_CUSTOMER("NEEDS_CLOSE_CUSTOMER", "需求已到截止时间", "NOTIFY"),
    NEEDS_CANCEL_PUBLICATION_CUSTOMER("NEEDS_CANCEL_PUBLICATION_CUSTOMER", "需求已取消发布", "NOTIFY"),
    NEEDS_CANCEL_COOPERATION_CUSTOMER("NEEDS_CANCEL_COOPERATION_CUSTOMER", "需求已取消合作", "NOTIFY"),
    NEEDS_COOPERATION_SUCCESS_CUSTOMER("NEEDS_COOPERATION_SUCCESS_CUSTOMER", "需求已成功合作", "NOTIFY"),
    NEEDS_SETTLEMENT_SUCCESS_CUSTOMER("NEEDS_SETTLEMENT_SUCCESS_CUSTOMER", "需求结算", "NOTIFY"),
	/**
    * 20180129 add by zjj 需求响应和报价  客户
    */
	NEEDS_RESPONED_CUSTOMER("NEEDS_RESPONED_CUSTOMER", "需求被服务商响应", "NOTIFY"),
	NEEDS_QUOTED_CUSTOMER("NEEDS_QUOTED_CUSTOMER", "需求被服务商报价", "NOTIFY"),
	/**
	 * 20180202 add by zjj        
	 */
	// 设备掉线：客户|服务商|运维    
	GATEWAY_OFF_LINE("GATEWAY_OFF_LINE", "设备掉线", "NOTIFY"),
	// 电压、负荷、功率因数异常：客户|服务商 
	VOLTAGE_ABNORMAL_CUSTOMER("VOLTAGE_ABNORMAL_CUSTOMER","电压异常(客户)","NOTIFY"),
	VOLTAGE_ABNORMAL_FACILITATOR("VOLTAGE_ABNORMAL_FACILITATOR","电压异常(服务商)","NOTIFY"),
	POWER_FACTOR_ABNORMAL_CUSTOMER("POWER_FACTOR_ABNORMAL_CUSTOMER","功率因数异常(客户)","NOTIFY"),
	POWER_FACTOR_ABNORMAL_FACILITATOR("POWER_FACTOR_ABNORMAL_FACILITATOR","功率因数异常(服务商)","NOTIFY"),
	LOAD_ABNORMAL_CUSTOMER("LOAD_ABNORMAL_CUSTOMER","负荷异常(客户)","NOTIFY"),
	LOAD_ABNORMAL_FACILITATOR("LOAD_ABNORMAL_FACILITATOR","负荷异常(服务商)","NOTIFY"),
	// 会员、需求审核：运维
	FACILITATOR_AUDIT("FACILITATOR_AUDIT","服务商审核","NOTIFY"),
	CUSTOMER_AUDIT("CUSTOMER_AUDIT","客户审核","NOTIFY"),
	ELECTRICIAN_AUDIT("ELECTRICIAN_AUDIT","社会电工审核","NOTIFY"),
	NEEDS_AUDIT("NEEDS_AUDIT","需求审核","NOTIFY"),
	/**
	 * 20180227 add by zjj 更换绑定手机号码    
	 */
	CHANGE_MOBILE_CODE("CHANGE_MOBILE_CODE", "更换绑定手机号码验证码", "NOTIFY"),
	CHANGE_MOBILE_SUCCESS("CHANGE_MOBILE_SUCCESS", "更换绑定手机号码成功", "NOTIFY"),
	/**
	 * 20180413 add by zjj 设置开合闸操作密码
	 */
	SET_SWITCH_PWD_CODE("SET_SWITCH_PWD_CODE", "设置开合闸操作密码", "NOTIFY"),
    
    /**租客电费相关提醒**/
    PRE_PAYMENT_RECHARGE_ORDER_CREATE("PRE_PAYMENT_RECHARGE_ORDER_CREATE", "电费账单生成", "NOTIFY"),
    MONTHLY_PAYMENT_RECHARGE_ORDER_CREATE("MONTHLY_PAYMENT_RECHARGE_ORDER_CREATE", "电费账单生成", "NOTIFY"),
    MONTHLY_PAYMENT_RECHARGE_ORDER_PAY_SUCCESS("MONTHLY_PAYMENT_RECHARGE_ORDER_PAY_SUCCESS", "电费缴费成功", "NOTIFY"),
    PRE_PAYMENT_RECHARGE_ORDER_PAY_SUCCESS("PRE_PAYMENT_RECHARGE_ORDER_PAY_SUCCESS", "电费扣款成功", "NOTIFY"),
    PRE_PAYMENT_RECHARGE_ORDER_PAY_FAIL("PRE_PAYMENT_RECHARGE_ORDER_PAY_FAIL", "电费扣款失败", "NOTIFY"),
    WALLET_BALANCE_NOT_ENOUGH("WALLET_BALANCE_NOT_ENOUGH", "余额不足", "NOTIFY"),
    
    /** 发票、开合闸相关消息*/
	RENTER_APPLY_INVOICE("RENTER_APPLY_INVOICE", "租客申请发票", "NOTIFY"),
	RENTER_INVOICE_PUBLISHED("RENTER_INVOICE_PUBLISHED", "发票开票完成", "NOTIFY"),
	SWITCH_OPERATION("SWITCH_OPERATION", "您正在进行开闭闸操作", "NOTIFY"),
	RENTER_SWITHED("RENTER_SWITHED", "正在对您进行开闭闸操作", "NOTIFY");
    
    private String value;
    private String desc;
    private String jumpTarget;//跳转页面

    MessageId(String value, String desc, String jumpTarget) {
        this.value = value;
        this.desc = desc;
        this.jumpTarget = jumpTarget;
    }

    public static MessageId parse(String value) {
        for (MessageId controlType : MessageId.values()) {
            if (controlType.getValue().equals(value)) {
                return controlType;
            }
        }
        return REGISTER_SUCCESS;
    }

    public String getValue() {
        return value;
    }

    public String getDesc() {
        return desc;
    }

    public String getJumpTarget() {
        return jumpTarget;
    }
}
